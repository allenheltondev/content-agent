openapi: 3.0.0
info:
  title: Blog API
  version: 1.0.0
  description: Multi-tenant blog post management API with AI-powered suggestions

x-amazon-apigateway-request-validators:
  Validate All:
    validateRequestParameters: true
    validateRequestBody: true
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: '{ "message": "$context.error.validationErrorString" }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin:
        Fn::Sub: "'${CORSOrigin}'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin:
        Fn::Sub: "'${CORSOrigin}'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin:
        Fn::Sub: "'${CORSOrigin}'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

paths:
  /posts:
    get:
      summary: List user's blog posts
      description: Retrieve all blog posts belonging to the authenticated user's tenant
      tags: [Posts]
      responses:
        200:
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogPost"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListPostsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

    post:
      summary: Create new blog post
      description: Create a new blog post for the authenticated user
      tags: [Posts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostRequest"
      responses:
        201:
          description: Blog post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePostFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /posts/{postId}:
    parameters:
      - $ref: '#/components/parameters/postId'
    get:
      summary: Get specific blog post
      description: Retrieve a specific blog post by ID, ensuring it belongs to the user's tenant
      tags: [Posts]
      responses:
        200:
          description: Blog post details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPostFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

    put:
      summary: Update blog post
      description: Update an existing blog post, ensuring it belongs to the user's tenant
      tags: [Posts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePostRequest"
      responses:
        200:
          description: Blog post updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePostFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

    delete:
      summary: Delete blog post
      description: Delete a blog post, ensuring it belongs to the user's tenant
      tags: [Posts]
      responses:
        204:
          description: Blog post deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePostFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /posts/{postId}/suggestions:
    parameters:
      - $ref: '#/components/parameters/postId'
    get:
      summary: Get suggestions for a blog post
      description: Retrieve all suggestions for a specific blog post, ensuring the post belongs to the user's tenant
      tags: [Suggestions]
      responses:
        200:
          description: List of suggestions for the blog post
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Suggestion"
                required: [ suggestions ]
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSuggestionsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /posts/{postId}/reviews:
    parameters:
      - $ref: "#/components/parameters/postId"
    post:
      summary: Start async review for a blog post
      description: Trigger asynchronous content analysis workflow and return Momento auth token for real-time notifications
      tags: [Reviews]
      responses:
        200:
          description: Review started successfully, returns Momento auth token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartReviewResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartReviewFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /posts/{postId}/suggestions/{suggestionId}/statuses:
    parameters:
      - $ref: '#/components/parameters/postId'
      - $ref: '#/components/parameters/suggestionId'
    post:
      summary: Update suggestion status
      description: Update the status of a specific suggestion (accept, reject, or delete), ensuring it belongs to a post owned by the user's tenant
      tags: [Suggestions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [accepted, rejected, deleted]
                  description: The new status for the suggestion
            examples:
              accept:
                summary: Accept a suggestion
                value:
                  status: accepted
              reject:
                summary: Reject a suggestion
                value:
                  status: rejected
              delete:
                summary: Delete a suggestion
                value:
                  status: deleted
      responses:
        204:
          description: Suggestion status updated successfully
        400:
          description: Invalid request body or status value
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Status must be one of: accepted, rejected, deleted"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateSuggestionStatusFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /stats:
    get:
      summary: Get writing statistics and insights
      description: Retrieve comprehensive writing statistics, suggestion metrics, and AI-powered insights for the authenticated user
      tags: [Statistics]
      responses:
        200:
          description: Writing statistics and insights retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsResponse"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStatsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /profile:
    get:
      summary: Get user profile
      description: Retrieve the authenticated user's writing profile and preferences
      tags: [Profile]
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: "#/components/schemas/UserProfile"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProfileFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

    post:
      summary: Create user profile
      description: Create a new writing profile for the authenticated user during initial setup
      tags: [Profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProfileRequest"
      responses:
        201:
          description: User profile created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: "#/components/schemas/UserProfile"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateProfileFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-request-validator: Validate All

    put:
      summary: Update user profile
      description: Update the authenticated user's writing profile and preferences
      tags: [Profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequest"
      responses:
        204:
          description: User profile updated successfully
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateProfileFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-request-validator: Validate All

components:
  parameters:
    postId:
      name: postId
      in: path
      required: true
      schema:
        type: string
      description: The blog post ID
    suggestionId:
      name: suggestionId
      in: path
      required: true
      schema:
        type: string
      description: The suggestion ID

  schemas:
    BlogPost:
      type: object
      required:
        - id
        - title
        - body
        - status
        - version
        - createdAt
        - updatedAt
        - authorId
      properties:
        id:
          type: string
          description: Unique identifier for the blog post (contentId)
          example: "550e8400-e29b-41d4-a716-446655440000"
        title:
          type: string
          description: Title of the blog post
          maxLength: 200
          example: "My First Blog Post"
        body:
          type: string
          description: Content body of the blog post
          maxLength: 50000
          example: "This is the content of my blog post..."
        status:
          type: string
          enum: [draft, review, published, abandoned]
          description: Current status of the blog post
          example: "draft"
        version:
          type: integer
          description: Version number of the blog post
          minimum: 1
          example: 1
        createdAt:
          type: integer
          description: Unix timestamp when the post was created
          example: 1640995200
        updatedAt:
          type: integer
          description: Unix timestamp when the post was last updated
          example: 1640995200
        authorId:
          type: string
          description: Cognito user ID of the post author
          example: "auth0|507f1f77bcf86cd799439011"

    CreatePostRequest:
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
          description: Title of the blog post
          maxLength: 200
          example: "My New Blog Post"
        body:
          type: string
          description: Content body of the blog post
          maxLength: 50000
          example: "This is the content of my new blog post..."
        status:
          type: string
          enum: [draft, review, published, abandoned]
          description: Initial status of the blog post
          default: "draft"
          example: "draft"

    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          description: Updated title of the blog post
          maxLength: 200
          example: "My Updated Blog Post"
        body:
          type: string
          description: Updated content body of the blog post
          maxLength: 50000
          example: "This is the updated content..."
        status:
          type: string
          enum: [draft, review, published, abandoned]
          description: Updated status of the blog post
          example: "review"

    Suggestion:
      type: object
      required:
        - id
        - contentId
        - startOffset
        - endOffset
        - textToReplace
        - replaceWith
        - reason
        - priority
        - type
        - contextBefore
        - contextAfter
        - anchorText
        - status
        - createdAt
      properties:
        id:
          type: string
          description: Unique identifier for the suggestion
          example: "550e8400-e29b-41d4-a716-446655440001"
        contentId:
          type: string
          description: ID of the blog post this suggestion belongs to
          example: "550e8400-e29b-41d4-a716-446655440000"
        startOffset:
          type: integer
          description: Starting character position of the text to replace
          minimum: 0
          example: 45
        endOffset:
          type: integer
          description: Ending character position of the text to replace
          minimum: 0
          example: 52
        textToReplace:
          type: string
          description: Original text that should be replaced
          example: "recieve"
        replaceWith:
          type: string
          description: Suggested replacement text
          example: "receive"
        reason:
          type: string
          description: Explanation for why this change is suggested
          example: "Spelling correction: 'recieve' should be 'receive'"
        priority:
          type: string
          enum: [low, medium, high]
          description: Priority level of the suggestion
          example: "high"
        type:
          type: string
          enum: [llm, brand, fact, grammar, spelling]
          description: Type of suggestion based on the source or category
          example: "spelling"
        contextBefore:
          type: string
          description: Text context before the suggested change
          example: "Please "
        contextAfter:
          type: string
          description: Text context after the suggested change
          example: " this email"
        anchorText:
          type: string
          description: The full text segment including context
          example: "Please recieve this email"
        status:
          type: string
          enum: [pending, accepted, rejected, deleted, skipped]
          description: Current status of the suggestion
          example: "pending"
        createdAt:
          type: integer
          description: Unix timestamp when the suggestion was created
          example: 1640995200
        updatedAt:
          type: integer
          description: Unix timestamp when the suggestion was last updated
          example: 1640995200

    UserProfile:
      type: object
      required:
        - userId
        - email
        - name
        - writingTone
        - writingStyle
        - topics
        - skillLevel
        - isComplete
        - createdAt
        - updatedAt
        - version
      properties:
        userId:
          type: string
          description: Cognito user ID
          example: "auth0|507f1f77bcf86cd799439011"
        email:
          type: string
          format: email
          description: User email address from Cognito
          example: "user@example.com"
        name:
          type: string
          description: User display name from Cognito
          example: "John Doe"
        writingTone:
          type: string
          description: User's preferred writing tone in their own words
          example: "I prefer a conversational and friendly tone that feels approachable and engaging"
        writingStyle:
          type: string
          description: User's preferred writing style in their own words
          example: "I write in a clear, structured style with short paragraphs and bullet points"
        topics:
          type: array
          items:
            type: string
          description: Array of topics the user writes about
          example:
            ["technology", "productivity", "remote work", "custom: AI ethics"]
        skillLevel:
          type: string
          enum: [beginner, intermediate, advanced, expert]
          description: User's self-assessed writing skill level
          example: "intermediate"
        isComplete:
          type: boolean
          description: Whether the profile setup is complete
          example: true
        createdAt:
          type: integer
          description: Unix timestamp when the profile was created
          example: 1640995200
        updatedAt:
          type: integer
          description: Unix timestamp when the profile was last updated
          example: 1640995200
        version:
          type: integer
          description: Version number of the profile, incremented on updates
          minimum: 1
          example: 1

    CreateProfileRequest:
      type: object
      required:
        - writingTone
        - writingStyle
        - topics
        - skillLevel
      properties:
        writingTone:
          type: string
          description: User's preferred writing tone in their own words
          minLength: 1
          maxLength: 1000
          example: "I prefer a conversational and friendly tone that feels approachable and engaging"
        writingStyle:
          type: string
          description: User's preferred writing style in their own words
          minLength: 1
          maxLength: 1000
          example: "I write in a clear, structured style with short paragraphs and bullet points"
        topics:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 100
          minItems: 1
          maxItems: 20
          description: Array of topics the user writes about
          example:
            ["technology", "productivity", "remote work", "custom: AI ethics"]
        skillLevel:
          type: string
          enum: [beginner, intermediate, advanced, expert]
          description: User's self-assessed writing skill level
          example: "intermediate"

    UpdateProfileRequest:
      type: object
      properties:
        writingTone:
          type: string
          description: Updated writing tone preference
          minLength: 1
          maxLength: 1000
          example: "I prefer a more formal and professional tone for business content"
        writingStyle:
          type: string
          description: Updated writing style preference
          minLength: 1
          maxLength: 1000
          example: "I write in a detailed, analytical style with comprehensive explanations"
        topics:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 100
          minItems: 1
          maxItems: 20
          description: Updated array of topics the user writes about
          example: ["business", "leadership", "strategy"]
        skillLevel:
          type: string
          enum: [beginner, intermediate, advanced, expert]
          description: Updated writing skill level
          example: "advanced"

    StatsResponse:
      type: object
      required:
        - totalPosts
        - totalSuggestions
        - acceptedSuggestions
        - rejectedSuggestions
        - skippedSuggestions
        - deletedSuggestions
        - acceptanceRate
        - suggestionsByType
        - insights
        - writingPatterns
      properties:
        totalPosts:
          type: integer
          description: Total number of blog posts created by the user
          minimum: 0
          example: 15
        totalSuggestions:
          type: integer
          description: Total number of suggestions received across all posts
          minimum: 0
          example: 127
        acceptedSuggestions:
          type: integer
          description: Number of suggestions that have been accepted
          minimum: 0
          example: 89
        rejectedSuggestions:
          type: integer
          description: Number of suggestions that have been rejected
          minimum: 0
          example: 23
        skippedSuggestions:
          type: integer
          description: Number of suggestions that were automatically skipped
          minimum: 0
          example: 12
        deletedSuggestions:
          type: integer
          description: Number of suggestions that have been deleted
          minimum: 0
          example: 3
        acceptanceRate:
          type: number
          description: Ratio of accepted suggestions to total suggestions (0.0 to 1.0)
          minimum: 0
          maximum: 1
          example: 0.70
        suggestionsByType:
          type: object
          description: Breakdown of suggestions by type
          properties:
            grammar:
              $ref: "#/components/schemas/SuggestionTypeStats"
            spelling:
              $ref: "#/components/schemas/SuggestionTypeStats"
            style:
              $ref: "#/components/schemas/SuggestionTypeStats"
            fact:
              $ref: "#/components/schemas/SuggestionTypeStats"
            brand:
              $ref: "#/components/schemas/SuggestionTypeStats"
          example:
            grammar:
              total: 45
              accepted: 32
              rejected: 8
            spelling:
              total: 23
              accepted: 20
              rejected: 3
        insights:
          type: array
          items:
            $ref: "#/components/schemas/WritingInsight"
          description: AI-powered insights about writing patterns and strengths
          example:
            - type: "strength"
              category: "writing_style"
              message: "Your writing consistently demonstrates clear structure and logical flow"
              confidence: 0.85
        writingPatterns:
          $ref: "#/components/schemas/WritingPatterns"

    SuggestionTypeStats:
      type: object
      required:
        - total
        - accepted
        - rejected
      properties:
        total:
          type: integer
          description: Total suggestions of this type
          minimum: 0
          example: 45
        accepted:
          type: integer
          description: Accepted suggestions of this type
          minimum: 0
          example: 32
        rejected:
          type: integer
          description: Rejected suggestions of this type
          minimum: 0
          example: 8

    WritingInsight:
      type: object
      required:
        - type
        - category
        - message
        - confidence
      properties:
        type:
          type: string
          enum: [strength, improvement, observation]
          description: Type of insight
          example: "strength"
        category:
          type: string
          enum: [writing_style, grammar, content, structure]
          description: Category of the insight
          example: "writing_style"
        message:
          type: string
          description: Human-readable insight message
          example: "Your writing consistently demonstrates clear structure and logical flow"
        confidence:
          type: number
          description: Confidence level of the insight (0.0 to 1.0)
          minimum: 0
          maximum: 1
          example: 0.85

    WritingPatterns:
      type: object
      required:
        - averagePostLength
        - commonTopics
        - writingTrends
      properties:
        averagePostLength:
          type: integer
          description: Average length of posts in characters
          minimum: 0
          example: 1250
        commonTopics:
          type: array
          items:
            type: string
          description: Most frequently used topics or keywords
          example: ["technology", "productivity", "remote work"]
        writingTrends:
          type: string
          description: Analysis of writing trends over time
          example: "Posts are becoming more concise over time"

    StartReviewResponse:
      type: object
      required:
        - reviewId
        - token
        - endpoint
        - expiresAt
      properties:
        reviewId:
          type: string
          description: Unique identifier for the review session
          example: "550e8400-e29b-41d4-a716-446655440002"
        token:
          type: string
          description: Auth token for subscribing to review notifications
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        endpoint:
          type: string
          description: Polling endpoint for receiving review completion notifications
          example: "https://api.example.com/reviews/550e8400-e29b-41d4-a716-446655440002/poll"
        expiresAt:
          type: integer
          description: Unix timestamp when the token expires
          example: 1640997000

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type identifier
          example: "ValidationError"
        message:
          type: string
          description: Human-readable error message
          example: "The request body contains invalid data"
        details:
          type: object
          description: Additional error context (development only)
          additionalProperties: true

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "ValidationError"
            message: "The request body contains invalid data"

    Unauthorized:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Unauthorized"
            message: "Valid JWT token required"

    Forbidden:
      description: Access denied - resource belongs to different tenant
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Forbidden"
            message: "Access denied to this resource"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "NotFound"
            message: "The requested resource was not found"

    Conflict:
      description: Resource already exists or conflict with current state
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Conflict"
            message: "Profile already exists for this user"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "InternalError"
            message: "An unexpected error occurred"

tags:
  - name: Posts
    description: Blog post management operations
  - name: Suggestions
    description: AI-generated suggestion operations
  - name: Statistics
    description: Writing statistics and insights operations
  - name: Profile
    description: User profile and writing preferences management
